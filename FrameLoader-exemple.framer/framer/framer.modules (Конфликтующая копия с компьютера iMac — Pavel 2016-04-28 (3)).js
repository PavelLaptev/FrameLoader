require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"Loader-CircleExpand":[function(require,module,exports){
exports.CircleExpand = function(opts) {
  var flag, from, i, j, randCircWrap, scriptEnable, to;
  if (opts == null) {
    opts = {};
  }
  flag = opts.hide != null ? opts.hide : opts.hide = true;
  scriptEnable = function() {
    var script;
    script = document.createElement("script");
    script.innerHTML = "var interval = setInterval(function() { if(document.readyState === 'complete') { clearInterval(interval); var wrap = document.getElementsByName('randCircWrap')[0]; wrap.setAttribute('style','display:none'); wrap.remove(); console.log('success!') } }, 100);";
    return document.head.appendChild(script);
  };
  if (flag === true) {
    scriptEnable();
  }
  randCircWrap = new Layer({
    width: Screen.width,
    height: Screen.height,
    backgroundColor: opts.back != null ? opts.back : opts.back = '#348aa7'
  });
  randCircWrap.parent = Framer.Device.screen;
  randCircWrap.bringToFront();
  randCircWrap.name = "randCircWrap";
  from = opts.from != null ? opts.from : opts.from = 0.4;
  to = opts.to != null ? opts.to : opts.to = 3;
  for (i = j = 3; j >= 0; i = --j) {
    Framer["circle" + i] = new Layer({
      width: 100 * i,
      height: 100 * i,
      borderRadius: 200,
      parent: randCircWrap
    });
    Framer["circle" + i].name = "circle" + i;
    Framer["circle" + i].center();
    Framer["animationA" + i] = new Animation({
      layer: Framer["circle" + (i + 1)],
      properties: {
        scale: 4
      },
      time: Utils.randomNumber(from, to),
      delay: 0.1,
      curve: "cubic-bezier(0.860, 0.000, 0.070, 1.000)"
    });
    Framer["animationB" + i] = Framer["animationA" + i].reverse();
    Framer["animationA" + i].on(Events.AnimationEnd, Framer["animationB" + i].start);
    Framer["animationB" + i].on(Events.AnimationEnd, Framer["animationA" + i].start);
  }
  Framer.animationA1.start();
  Framer.animationA2.start();
  Framer.animationA0.start();
  Framer.circle1.backgroundColor = opts.circle1 != null ? opts.circle1 : opts.circle1 = '#5dd39e';
  Framer.circle2.backgroundColor = opts.circle2 != null ? opts.circle2 : opts.circle2 = '#bce784';
  return Framer.circle3.backgroundColor = opts.circle3 != null ? opts.circle3 : opts.circle3 = '#525174';
};


},{}],"Loader-Dots":[function(require,module,exports){
exports.CircleExpand = function(opts) {
  var flag, from, i, j, randCircWrap, scriptEnable, to;
  if (opts == null) {
    opts = {};
  }
  flag = opts.hide != null ? opts.hide : opts.hide = true;
  scriptEnable = function() {
    var script;
    script = document.createElement("script");
    script.innerHTML = "var interval = setInterval(function() { if(document.readyState === 'complete') { clearInterval(interval); var wrap = document.getElementsByName('randCircWrap')[0]; wrap.setAttribute('style','display:none'); wrap.remove(); console.log('success!') } }, 100);";
    return document.head.appendChild(script);
  };
  if (flag === true) {
    scriptEnable();
  }
  randCircWrap = new Layer({
    width: Screen.width,
    height: Screen.height,
    backgroundColor: opts.back != null ? opts.back : opts.back = '#348aa7'
  });
  randCircWrap.parent = Framer.Device.screen;
  randCircWrap.bringToFront();
  randCircWrap.name = "randCircWrap";
  from = opts.from != null ? opts.from : opts.from = 0.4;
  to = opts.to != null ? opts.to : opts.to = 3;
  for (i = j = 3; j >= 0; i = --j) {
    Framer["circle" + i] = new Layer({
      width: 100 * i,
      height: 100 * i,
      borderRadius: 200,
      parent: randCircWrap
    });
    Framer["circle" + i].name = "circle" + i;
    Framer["circle" + i].center();
    Framer["animationA" + i] = new Animation({
      layer: Framer["circle" + (i + 1)],
      properties: {
        scale: 4
      },
      time: Utils.randomNumber(from, to),
      delay: 0.1,
      curve: "cubic-bezier(0.860, 0.000, 0.070, 1.000)"
    });
    Framer["animationB" + i] = Framer["animationA" + i].reverse();
    Framer["animationA" + i].on(Events.AnimationEnd, Framer["animationB" + i].start);
    Framer["animationB" + i].on(Events.AnimationEnd, Framer["animationA" + i].start);
  }
  Framer.animationA1.start();
  Framer.animationA2.start();
  Framer.animationA0.start();
  Framer.circle1.backgroundColor = opts.circle1 != null ? opts.circle1 : opts.circle1 = '#5dd39e';
  Framer.circle2.backgroundColor = opts.circle2 != null ? opts.circle2 : opts.circle2 = '#bce784';
  return Framer.circle3.backgroundColor = opts.circle3 != null ? opts.circle3 : opts.circle3 = '#525174';
};


},{}],"Loader":[function(require,module,exports){
exports.CircleExpand = function(opts) {
  var flag, from, i, j, randCircWrap, scriptEnable, to;
  if (opts == null) {
    opts = {};
  }
  flag = opts.hide != null ? opts.hide : opts.hide = true;
  scriptEnable = function() {
    var script;
    script = document.createElement("script");
    script.innerHTML = "var interval = setInterval(function() { if(document.readyState === 'complete') { clearInterval(interval); var wrap = document.getElementsByName('randCircWrap')[0]; wrap.setAttribute('style','display:none'); wrap.remove(); console.log('success!') } }, 100);";
    return document.head.appendChild(script);
  };
  if (flag === true) {
    scriptEnable();
  }
  randCircWrap = new Layer({
    width: Screen.width,
    height: Screen.height,
    backgroundColor: opts.back != null ? opts.back : opts.back = '#348aa7'
  });
  randCircWrap.parent = Framer.Device.screen;
  randCircWrap.bringToFront();
  randCircWrap.name = "randCircWrap";
  from = opts.from != null ? opts.from : opts.from = 0.4;
  to = opts.to != null ? opts.to : opts.to = 3;
  for (i = j = 3; j >= 0; i = --j) {
    Framer["circle" + i] = new Layer({
      width: 100 * i,
      height: 100 * i,
      borderRadius: 200,
      parent: randCircWrap
    });
    Framer["circle" + i].name = "circle" + i;
    Framer["circle" + i].center();
    Framer["animationA" + i] = new Animation({
      layer: Framer["circle" + (i + 1)],
      properties: {
        scale: 4
      },
      time: Utils.randomNumber(from, to),
      delay: 0.1,
      curve: "cubic-bezier(0.860, 0.000, 0.070, 1.000)"
    });
    Framer["animationB" + i] = Framer["animationA" + i].reverse();
    Framer["animationA" + i].on(Events.AnimationEnd, Framer["animationB" + i].start);
    Framer["animationB" + i].on(Events.AnimationEnd, Framer["animationA" + i].start);
  }
  Framer.animationA1.start();
  Framer.animationA2.start();
  Framer.animationA0.start();
  Framer.circle1.backgroundColor = opts.circle1 != null ? opts.circle1 : opts.circle1 = '#5dd39e';
  Framer.circle2.backgroundColor = opts.circle2 != null ? opts.circle2 : opts.circle2 = '#bce784';
  return Framer.circle3.backgroundColor = opts.circle3 != null ? opts.circle3 : opts.circle3 = '#525174';
};


},{}],"myModule":[function(require,module,exports){
exports.Spin = function(color) {
  var AnimationA, AnimationB, script, spin, spinWrap;
  if (color == null) {
    color = '#5A62E7';
  }
  script = document.createElement("script");
  script.innerHTML = "function preload(){ var v_obj = document.getElementsByName('spinWrap')[0]; v_obj.setAttribute('style','display:none'); } window.onload = function () { preload() }";
  document.head.appendChild(script);
  spinWrap = new Layer({
    backgroundColor: color,
    width: Screen.width,
    height: Screen.height
  });
  spinWrap.parent = Framer.Device.screen;
  spinWrap.bringToFront();
  spinWrap.name = "spinWrap";
  print("Loader");
  spin = new Layer({
    backgroundColor: 'black',
    width: 100,
    height: 100,
    borderRadius: 200,
    parent: spinWrap
  });
  spin.name = "spin";
  spin.center();
  AnimationA = new Animation({
    layer: spin,
    properties: {
      scale: 3
    },
    time: 0.4,
    curve: "ease-in-out"
  });
  AnimationB = AnimationA.reverse();
  AnimationA.start();
  AnimationA.on(Events.AnimationEnd, AnimationB.start);
  return AnimationB.on(Events.AnimationEnd, AnimationA.start);
};


/*class Loader extends Layer
        
    constructor: (options={}) ->
        options.backgroundColor = "rgba(0,0,0,0.7)"
        options.width = Screen.width
        options.height = Screen.height
        super options
        parent = Framer.Device.screen
        .bringToFront()

myFunction = ->
    print "I'm running!"

exports.Loader = Loader
 */


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
